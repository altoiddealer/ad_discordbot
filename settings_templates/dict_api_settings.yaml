# Overview:
# - bot_api_functions: defines APIs/endpoints for the bot's "main functions" (bot commands, message responses, etc). Only one "main client" allowed for each: ImgGen / TextGen / TTSGen
# - all_apis: A list of ALL APIs/endpoints including ones being used for main functions, and non-main bot functions (via the Tags system / "user commands", etc)
# - presets: Most 'dict' values in this config can include a 'preset_name' key (linked to a preset dict), to limit redundancy.
# - workflows: For executing custom logic beyond default bahviors (ei: add additional post-processing from a 'post_txt2img' endpoint call). For non-main functions only (N/A to main functions)

bot_api_functions:
  # Purpose: Establish which API the bot will use for each "main function", including unknown APIs so long as instructions are followed carefully.
  # Instructions:
  #   Required:
  #     - Define new APIs in main section "all_apis", then link them by name (**case sensitive!!**)
  #     - Ensure each "endpoint_name" matches
  #   For unknown APIs:
  #   - Comment out or set null value for any data in this section which is N/A for the API (ex: Commenting/removing 'post_options' will disable posting imgmodel change params)
  #   - You may need to research the input/output structure for your API endpoints to configure "_key" values. ('response_handling' can also be used to return expected value types - more on this below)
  #   - The extra "_key" values in this section (ei: 'output_file_path_key') are intended to simplify common expected API behavior, but **ARE NOT REQUIRED**.
  #     Example scenario: Your main TTS client's 'post_generate' endpoint returns raw data (bytes). The bot's main functions need the file path. ...What should I do?
  #                     - Set 'output_file_path_key: null' (or remove the line)
  #                     - Define a "response_handling" for this endpoint (in 'all_apis') so it returns a file path after the last 'step'

  imggen:
    # This section can be mostly ignored if using known APIs: 'Forge', 'Reforge', 'Comfy', 'Swarm', or 'A1111' (must include this in the name!!).
    api_name: SD Forge
    post_txt2img:
      endpoint_name: Post txt2img
      prompt_key: prompt              # ex: payload = {'prompt': 'This is my prompt', ...}
      neg_prompt_key: negative_prompt # ex: payload = {'negative_prompt': 'This is the negative prompt', ...}
      seed_key: seed                  # ex: payload = {'seed': 12345, ...}
      images_result_key: images       # ex: response = {'images': <list of images in base64 format>, ...}
    post_img2img: {endpoint_name: Post img2img, prompt_key: prompt, neg_prompt_key: negative_prompt, seed_key: seed, images_result_key: images}
    post_cancel: {endpoint_name: Cancel}
    get_progress:
      endpoint_name: Get Progress
      progress_key: progress          # ex: response = {'progress': 0.2, ...}
      eta_key: eta_relative           # ex: response = {'eta_relative': 163.53, ...}
      max_key: max                    # ex: response = {'max': 20, ...}
    post_options:
      endpoint_name: Post Options
      imgmodel_input_key: sd_model_checkpoint
    get_imgmodels:
      endpoint_name: Get Checkpoints
      imgmodel_name_key: model_name
      imgmodel_value_key: title
      imgmodel_filename_key: filename
    get_controlnet_models: {endpoint_name: Get Cnet Models}
    post_server_restart: {endpoint_name: Post Server Restart}
    post_upload: {endpoint_name: Upload} # Not used for A1111/Forge/ReForge
    # NOTE: The bot's "main controlnet" support works out-of-the-box for A1111-like webUIs (A1111 / Forge / ReForge)
    #       ComfyUI (and potentially other APIs) does not have an endpoint that returns the expected structure. See example usage in all_apis: ComfyUI.
    get_controlnet_control_types:
      endpoint_name: Get Cnet Control Types
      control_types_key: control_types # ex: response = {'control_types': <Beautifully organized controlnet model dictionary>, ...}
    # ComfyUI specific (may work for similar APIs)
    get_history: {endpoint_name: History}
    get_view: {endpoint_name: View}

  # Bot currently cannot use textgen APIs for main functions - TextGen API Support coming soon!
  textgen:
    api_name: Text Generation WebUI

  ttsgen:
    api_name: AllTalk TTS v2
    get_voices:
      endpoint_name: Get TTS Voices
      get_voices_key: voices # key name in the response body. Value is a list of strings (the voice names) to populate '/speak' cmd options
    get_languages:
      endpoint_name: null # Example API config for 'AllTalk' does not have a "get_languages" route. But if your API does, the bot can use it for '/speak' options.
      get_languages_key: languages # key name in the response body. Value is a list of languages (the language names) to populate '/speak' cmd options
    post_generate:
      endpoint_name: Post TTS Generate
      text_input_key: text_input # input key for the text that will be generated. ex: payload = {'text_input': 'This is the text to TTS', ...}
      output_file_path_key: output_file_path # key name in the response body. Value is a string, the path to the generated audio file.
      language_input_key: language # input key for the language. ex: payload = {'language': 'English', ...}
      voice_input_key: character_voice_gen  # input key for the voice. ex: payload = {'voice': 'Female01.wav', ...}

# More bot functions which require designated clients / endpoints.
misc_api_functions:
  upload_large_files:
    api_name: GoFile
    post_upload:
      endpoint_name: Post Upload
      file_key: file

all_apis:
  # You may define any number of APIs and Endpoints here (a list of dictionaries), making them available to use for various bot functions,
  #   including the "main" apis above, the Tags system (dict_tags.yaml), planned "user commands" feature (not yet implemented), etc.

  # 'payload_type' is recommended for all POST/PUT methods. Valid types: json (default) / form / multipart (file) / query
  - name: SD Forge
    url: http://127.0.0.1:7860
    enabled: true
    default_headers: {Content-Type: application/json} # will merge with endpoint-specific headers (endpoint keys will have higher priority)
    default_timeout: 10 # seconds to wait before aborting api call
    auth: null # {username: myuser, password: mypass} # dict format with keys 'username' and 'password'
    # Add any endpoints that you may use for bot functions (Tags system, user commands, etc)
    endpoints:
      - name: Post txt2img
        path: /sdapi/v1/txt2img
        preset: sd-txt2img-img2img-endpoints # See 'presets' further down (serves as example usage for presets)
      - name: Post img2img
        path: /sdapi/v1/img2img
        preset: sd-txt2img-img2img-endpoints # See 'presets' further down
      - {name: Cancel, path: /sdapi/v1/interrupt, method: POST}
      - {name: Get Progress, path: /sdapi/v1/progress, method: GET}
      - {name: Get Checkpoints, path: /sdapi/v1/sd-models, method: GET}
      - {name: Get Options, path: /sdapi/v1/options, method: GET}
      - {name: Post Options, path: /sdapi/v1/options, method: POST, payload_type: json}
      - {name: Get Cnet Models, path: /controlnet/model_list, method: GET}
      - {name: Get Cnet Control Types, path: /controlnet/control_types, method: GET}
      - {name: Post Server Restart, path: /sdapi/v1/server-restart, method: POST, retry: 0}

  - name: SwarmUI
    url: http://localhost:7801
    enabled: false
    default_headers: {Content-Type: application/json}
    default_timeout: 240
    auth: null
    endpoints:
      - {name: Post txt2img, path: /API/GenerateText2ImageWS, method: POST, payload_base: swarm.yaml, payload_type: json}
      - {name: Post img2img, path: /API/GenerateText2ImageWS, method: POST, payload_base: swarm.yaml, payload_type: json}
      - {name: Post Options, path: /API/SelectModel, method: POST}
      - {name: Cancel, path: /API/InterruptAll, method: POST}

  - name: ComfyUI
    url: http://127.0.0.1:8188
    enabled: false
    default_headers: {Content-Type: application/json}
    default_timeout: 60
    auth: null
    websocket:
      url: ws://127.0.0.1:8188/ws
      client_id_required: true
      client_id_format: uuid
      query_params:
        clientId: "{client_id}"
      reconnect_on_failure: true
      retry: 1
    endpoints:
      - name: Post txt2img
        path: /prompt
        method: POST
        payload_base: comfyui_txt2img.json # comfyui_txt2img_loras_and_model-types.json / comfyui_txt2img_loras.json --- requires 'rgthree-comfy' nodes
        payload_type: json
      - name: Post img2img
        path: /prompt
        method: POST
        payload_base: comfyui_img2img.json # comfyui_img2img_loras_and_model-types.json / comfyui_img2img_loras.json --- requires 'rgthree-comfy' nodes
        payload_type: json
      - {name: History, path: "/history/{}", method: GET} # ex: prompt_id is formatted into {}
      - {name: View, path: /view, method: GET, payload_type: query, response_type: bytes}
      - {name: Upload, path: "/upload/{}", method: POST, headers: {Content-Type: multipart/form-data}, payload_type: multipart, payload: upload_files.yaml} # ex: "image" is formatted into {}
      - {name: Cancel, path: /interrupt, method: POST, response_type: text}
      # Placeholder. The bot will automatically fetch model values for CheckpointLoaderSimple, UnetLoaderGGUF and UNETLoader. Create an Github issue if you feel more should be included.
      - {name: Get Checkpoints, path: "/object_info/CheckpointLoaderSimple", method: GET}
      # 'method: null' will skip API call, and simply return the payload as the result. In this case, user needs to manually configure a '/user/payload/cnet_data.yaml'
      - {name: Get Cnet Control Types, path: /anything/at/all, method: null, payload_base: cnet_data.json}

  - name: AllTalk TTS v2
    url: http://127.0.0.1:7851
    enabled: false
    default_headers:
      Content-Type: application/x-www-form-urlencoded
    default_timeout: 120
    auth: null
    endpoints:
      - {name: Get TTS Voices, path: /api/voices, method: GET, timeout: 10}
      - name: Get Audio
        path: "{}" # uses 'path_vars' from response_handling to automatically complete the path (ex: '/audio/myoutputfile.wav')
        method: GET
      - name: Post TTS Generate
        path: /api/tts-generate
        method: POST
        # Note: response_handling is bypassed in bot main functions if using the "_key" method in 'bot_api_functions' (first section of this file)
        response_handling:
          - extract_key: output_file_url
            save_as: output_url
          - call_api:
             client_name: AllTalk TTS v2
             endpoint_name: Get Audio
             response_type: bytes
             path_vars: "{output_url}" # API call will return audio bytes
          - save:
              file_format: wav
              returns: file_path
  
  - name: Text Generation WebUI
    url: http://127.0.0.1:7861
    enabled: false
    default_headers: {Content-Type: application/json}
    default_timeout: 60
    auth: null
    endpoints: []

  # Example for uploading files
  - name: GoFile
    url: https://upload.gofile.io
    enabled: false
    default_headers: {Content-Type: application/json, Authorization: Bearer <**YOUR AUTH TOKEN**>}
    endpoints:
      - name: Post Upload
        path: /uploadfile
        method: POST
        headers: {Content-Type: multipart/form-data}
        payload_type: multipart
        # payload:
        #   data: {folderId: <**A SPECIFIC FOLDER ID**>} # Optional for this API
        response_handling:
          - extract_key: data.downloadPage # Gets the download link ('data': {'downloadPage': <the URL>,...})

# Create presets here which can be injected in any 'endpoint', or in any 'response_handling' / 'workflow' steps.
presets:
  - name: sd-txt2img-img2img-endpoints
    method: POST
    retry: 1
    payload_type: json
    payload_base: sd-webui.yaml
    input_data: {prompt: "{prompt}"}
    timeout: 120
    # response_handling is SKIPPED when 'extract_key' method is used (in first section, 'bot_api_functions')
    # This serves as an example how to replicate internal handling via the response_handling system.
    response_handling:
      # Capture 'images' list as context variable "image_list"
      - extract_key: images
        save_as: image_list
      # Execute a 'for loop' of steps on each value in 'image_list'
      - for_each:
          in: image_list
          as: image
          steps:
            - decode_base64: true          
            - save:
                file_format: png
                file_path: "images"
                file_name: "img_{image_index}"


# For executing custom logic beyond default bahaviors (ei: add additional post-processing from a 'post_txt2img' endpoint call).
# Currently only accessed via Tags system ('run_workflow' tag). Also planned for use in upcoming "User Commands" feature.
workflows:
  - name: Comfy Wan t2v
    steps:
      - call_api:
          api_name: ComfyUI
          endpoint_name: Prompt
          payload_type: json
          input_data:
            prompt: "{prompt}"
        save_as: prompt_id
      - track_progress:
          client_name: ComfyUI
          progress_key: data.value # Required. dot notation gets the value nested in "data"
          max_key: data.max        # Optional. If applicable, should return the maximum value of "progress".
          eta_key: null            # Optional. If applicable, discord embed will include the ETA value.
          message: Generating a video # message for the discord embed
          completion_condition:       # Optional: All key/values must be matched to stop fetching progress
            type: executed
            data: {prompt_id: "{prompt_id}"}
          # websocket exclusive values
          use_ws: True
          type_filter: [progress, executed]   # ignores other message types
          data_filter: {prompt_id: "{prompt_id}"} # must '.get()' these key/values

  - name: fan_out_translate
    description: Translates a sentence into multiple languages in parallel
    steps:
      - call_api:
          api_name: Text Generation WebUI
          endpoint_name: Generate
          input_data:
            prompt: "Say hello"
      - extract_key: text
        save_as: base_text
      - group:
          - call_api:
              api_name: DeepL API
              endpoint_name: Translate
              input_data:
                text: "{base_text}"
                target_lang: "ES"
            save_as: es_text

          - call_api:
              api_name: DeepL API
              endpoint_name: Translate
              input_data:
                text: "{base_text}"
                target_lang: "FR"
            save_as: fr_text

      - call_api:
          api_name: Local Processor
          endpoint_name: Join
          input_data:
            es: "{es_text}"
            fr: "{fr_text}"
      # returns result of last step (multilingual output)

## Schemas

# websocket:
#   url: "ws://127.0.0.1:8188/ws"        # (str) Full WebSocket URL; fallback to HTTP-based conversion if not provided
#   client_id_required: true             # (bool) Whether a client_id must be added to the connection URL
#   client_id_format: "uuid"             # (str) Format for generated client_id: "uuid", "short", "timestamp", "hex", "opaque", "int", "machine", "env_user"
  
#   token_required: false                # (bool) Whether a token is required in the URL
#   token_name: "token"                  # (str) The query parameter name used to pass the token (e.g., "token", "auth")

#   session_id_required: false           # (bool) Whether a session ID is required for reconnect/resume
#   session_id_name: "session_id"        # (str) The query parameter name for session ID

#   channel_required: false              # (bool) Whether the connection must specify a channel/room name
#   channel_name: "channel"              # (str) The query parameter name for channel (e.g., chat room, pub/sub topic)

#   version_required: false              # (bool) Whether a version must be passed in the URL
#   version_name: "version"              # (str) The query parameter name for the version (e.g., "v", "api_version")

#   headers:                             # (dict[str, str]) Optional headers to send during WebSocket connection (e.g., for Auth)
#     Authorization: "Bearer {token}"   # Example: Replace `{token}` at runtime

#   query_params:                        # (dict[str, str]) Key-value pairs to convert into ?key=value&key2=value2...
#     client_id: "{client_id}"           # Placeholders will be dynamically resolved at runtime
#     token: "{token}"
#     channel: "{channel}"
#     version: "v2"
#     app_name: "MyApp"
#     debug: "1"

#   reconnect_on_failure: true           # (bool) If true, the client will auto-reconnect on failure
#   retry: 1                             # (int) Number of retry attempts for reconnecting

# More dynamic values for query_params:
# "{client_id}"
# "{token}"
# "{session_id}"
# "{channel}"
# "{version}"
